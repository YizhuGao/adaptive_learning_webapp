import torch
import torch.nn as nn
import torch.nn.functional as F
import pandas as pd

# Load the necessary data (make sure the paths are correct)
tce_analysis = pd.read_excel('TCE_Analysis.xlsx')
tce_misunderstanding = pd.read_excel('TCE_Misunderstanding.xlsx')

responses = tce_analysis.iloc[:, 1:].values  # Student responses (excluding item_id column)
item_ids = tce_analysis['item_id'].values  # Item IDs
misconception_matrix = tce_misunderstanding.iloc[:, 1:].values  # Knowledge (misconception) matrix

num_students = responses.shape[1]
num_items = responses.shape[0]

# Re-define the model architecture as it was during training
class PosLinear(nn.Linear):
    def forward(self, input: torch.Tensor) -> torch.Tensor:
        weight = 2 * F.relu(1 * torch.neg(self.weight)) + self.weight
        return F.linear(input, weight, self.bias)

class Net(nn.Module):
    def __init__(self, knowledge_n, exer_n, student_n):
        super(Net, self).__init__()
        self.knowledge_dim = knowledge_n
        self.exer_n = exer_n
        self.emb_num = student_n
        self.stu_dim = self.knowledge_dim
        self.prednet_input_len = self.knowledge_dim
        self.prednet_len1, self.prednet_len2 = 512, 256

        self.student_emb = nn.Embedding(self.emb_num, self.stu_dim)
        self.k_difficulty = nn.Embedding(self.exer_n, self.knowledge_dim)
        self.e_difficulty = nn.Embedding(self.exer_n, 1)
        self.prednet_full1 = PosLinear(self.prednet_input_len, self.prednet_len1)
        self.drop_1 = nn.Dropout(p=0.5)
        self.prednet_full2 = PosLinear(self.prednet_len1, self.prednet_len2)
        self.drop_2 = nn.Dropout(p=0.5)
        self.prednet_full3 = PosLinear(self.prednet_len2, 1)
        
        for name, param in self.named_parameters():
            if 'weight' in name:
                nn.init.xavier_normal_(param)

    def forward(self, stu_id, input_exercise, input_knowledge_point):
        stu_emb = self.student_emb(stu_id)
        stat_emb = torch.sigmoid(stu_emb)
        k_difficulty = torch.sigmoid(self.k_difficulty(input_exercise))
        e_difficulty = torch.sigmoid(self.e_difficulty(input_exercise))
        input_x = e_difficulty * (stat_emb - k_difficulty) * input_knowledge_point
        input_x = self.drop_1(torch.sigmoid(self.prednet_full1(input_x)))
        input_x = self.drop_2(torch.sigmoid(self.prednet_full2(input_x)))
        output_1 = torch.sigmoid(self.prednet_full3(input_x))
        return output_1.view(-1)

    def get_knowledge_status(self, stu_id):
        stu_emb = self.student_emb(stu_id)
        return torch.sigmoid(stu_emb).cpu().detach().numpy()

# Define the class for model management
class NCDM:
    def __init__(self, knowledge_n, exer_n, student_n):
        self.ncdm_net = Net(knowledge_n, exer_n, student_n)

    def load_model(self, model_path, device="cpu"):
        self.ncdm_net = self.ncdm_net.to(device)
        self.ncdm_net.load_state_dict(torch.load(model_path, map_location=device))
        print(f"Model loaded from {model_path}")

# Define variables based on your training data
knowledge_n = tce_misunderstanding.shape[1] - 1
exer_n = num_items
student_n = num_students

# Initialize and load the model
ncdm_model = NCDM(knowledge_n, exer_n, student_n)
ncdm_model.load_model('ncdm_model.pth', device="cpu")  # specify the correct device (cpu or cuda)
